plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot' version "2.3.4.RELEASE"
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id "com.jfrog.artifactory" version "4.13.0"
    id "org.sonarqube" version "2.7.1"
    id "io.freefair.lombok" version "5.2.1"
    id 'net.ltgt.apt' version '0.15'
}

mainClassName = "br.com.southsystem.assembleia.AssembleiaApplication"

dependencies {
    implementation project(":common-exception")
    implementation project(":impl")
    implementation project(":contract")
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: "io.freefair.lombok"

    group = 'br.com.southsystem'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    jacoco {
        toolVersion = "0.8.5"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/snapshot' }
    }

    test {
        useJUnitPlatform()
    }

    ext {
        set('springCloudVersion', "Hoxton.SR8")
        set('keycloakVersion', '15.0.2')
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom 'org.springframework.boot:spring-boot-dependencies:2.3.4.RELEASE'
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.cloud:spring-cloud-starter-config'

        runtimeOnly 'io.r2dbc:r2dbc-postgresql'
        runtimeOnly 'org.postgresql:postgresql'

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
        testImplementation 'io.projectreactor:reactor-test'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine'
        testImplementation("org.testcontainers:testcontainers:1.14.0") {
            exclude group: 'jackson', module: 'jackson'
        }
        testImplementation 'org.mockito:mockito-junit-jupiter'

        testImplementation 'io.r2dbc:r2dbc-h2'
        testImplementation 'com.h2database:h2'

        // https://mvnrepository.com/artifact/org.mapstruct/mapstruct
        implementation 'org.mapstruct:mapstruct:1.4.2.Final'

        // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
        implementation 'org.apache.commons:commons-lang3:3.10'

        // https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api
        implementation 'javax.servlet:javax.servlet-api:3.1.0'

        implementation("org.liquibase:liquibase-core:3.8.0")
        implementation("org.springframework.boot:spring-boot-starter-data-jdbc")

        annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
        testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
    }

    sonarqube {
        file("$buildDir/classes").mkdirs()
        properties {
            property 'sonar.exclusions', '**/config/**, **/kafka/**, **/constants/**, **/enums/**, **/properties/**'
        }
    }

    tasks.withType(Checkstyle).each { checkstyleTask ->
        checkstyleTask.doLast {
            def errors = reports.findAll { report ->
                def outputFile = report.destination
                outputFile.exists() && outputFile.text.contains("<error ")
            }

            if (!errors.isEmpty()) {
                throw new GradleException("There are some checkstyle errors: $errors")
            } else {
                println("No checkstyle errors")
            }
        }
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.setDestination(file("${buildDir}/reports/jacoco/report.xml"))
        html.enabled true
        html.setDestination(file("${buildDir}/reports/jacoco/html"))
        csv.enabled false
    }
}